#!/usr/bin/env python2
import sys, os, time, subprocess
from pdb import set_trace

swdir = os.path.realpath(os.environ['URA_PROJECT'])
jobid = os.environ['jobid']
inputdir = os.path.join(swdir, 'inputs')
inputdir = os.path.join(inputdir, jobid)

jobdir = sys.argv[1]
exe = sys.argv[2]
execonfig = sys.argv[3]
jobargs = sys.argv[4:]

os.system('git commit -a -m ' + jobdir)

#os.mkdir('Production_'+ time.strftime("%Y-%m-%d_%H:%M:%S", time.gmtime()))
if os.path.isdir(jobdir):
	print jobdir, 'exists: EXIT'
	sys.exit(-1)
jobdir = os.path.join(os.getcwd(), jobdir)
os.mkdir(jobdir)

os.system('cp ' + execonfig + ' ' + jobdir)
execonfig = os.path.join(jobdir, os.path.basename(execonfig))

p = subprocess.Popen(['which', exe], stdout=subprocess.PIPE)
exe = p.stdout.read().split('\n')[0]
cpcomm = 'cp ' + exe + ' ' + jobdir
os.system(cpcomm)
exe = os.path.join(jobdir, os.path.basename(exe))
print exe, execonfig

p = subprocess.Popen(['ldd', exe], stdout=subprocess.PIPE)
slibs = p.stdout.read().split('\n')
slibs = [(l.split('=>')[-1].split('(')[0]).strip() for l in slibs if 'uscms' in l]
libs = []
for lib in slibs:
    cpcomm = 'cp ' + lib + ' ' + jobdir
    print cpcomm
    os.system(cpcomm)
    libs.append(os.path.join(jobdir, os.path.basename(lib)))


files = os.listdir(inputdir)

samplefiles = [f for f in files if 'txt' in f]

transferdir = os.path.join(inputdir, 'INPUT')
transferfiles = []
if os.path.isdir(transferdir):
	transferfiles = os.listdir(transferdir)

transferfiles = [os.path.join(transferdir, tf) for tf in transferfiles]
transferfiles+=libs
transferfiles.append(execonfig)
transferfiles.append(exe)

transferfiles_config = ', '.join(transferfiles)

for sf in samplefiles:
	if 'QCD' in sf:
		filesperjob = 96 #72 #12
	elif 'DATA_' in sf:
		filesperjob = 96 #80 #60 #10
	else:
		filesperjob = 96 #96 #72 #12
	#infile = os.path.join(inputdir, sf)
	jobpath = os.path.join(jobdir, sf.split('.txt')[0])
	os.mkdir(jobpath)
	infile = os.path.join(jobpath, sf)
	print 'cp ' + os.path.join(inputdir, sf) + ' ' + infile
	os.system('cp ' + os.path.join(inputdir, sf) + ' ' + infile)
	infiledes = open(infile, 'r')
	numrootfiles = infiledes.read().count('.root')
	infiledes.close()
	numjobs = max(numrootfiles/filesperjob, 1)
	sample = sf.split('.txt')[0]
	print sf, numjobs
	for j in range(0, numjobs):
		condorfile ="""universe = vanilla
Executable = batch_job.sh
Should_Transfer_Files = YES
WhenToTransferOutput = ON_EXIT
Transfer_Input_Files = {5}
Output = con_{2}.stdout
Error = con_{2}.stderr
Arguments = {0} {1} {6}_out_{2}.root --thread 1 --j {2} --J {3} {4}
Queue

		""".format(exe.split('/')[-1], sf, j, numjobs, ' '.join(jobargs), transferfiles_config+', '+infile, sample)
        
		conf = open(os.path.join(jobpath, 'condor_'+str(j)+'.jdl'), 'w')
		conf.write(condorfile)
		conf.close()

                batch_job="""#!/bin/bash
PA=$@
PA=${{PA#* }}

EXE=$1
echo $HOSTNAME
pwd
THEDIR=`pwd`
ls -lht

export SCRAM_ARCH={0}
source /cvmfs/cms.cern.ch/cmsset_default.sh
which scram
scram p CMSSW {1}
cd {1}
eval `scramv1 runtime -sh`
cd $THEDIR

export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
echo $LD_LIBRARY_PATH
ldd $EXE

echo $EXE
echo $PA
date
echo "BEGIN EXE"
./$EXE $PA 
echo "END EXE"
date
ls -lht

                """.format(os.environ['SCRAM_ARCH'], os.environ['CMSSW_VERSION'])

	conf = open(os.path.join(jobpath, 'batch_job.sh'), 'w')
	conf.write(batch_job)
	conf.close()
        
	for j in range(0, numjobs):
		os.system('cd ' + jobpath + ' && condor_submit condor_'+str(j)+'.jdl')

